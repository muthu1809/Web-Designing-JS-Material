ஜாவா ஸ்கிரிப்ட்:

ஏன் படிக்க வேண்டும்?
JavaScript is a programming language that adds interactivity to your website. This happens in games, in the behavior of responses when buttons are pressed or with data entry on forms; with dynamic styling; with animation, etc.

யார் கண்டுபிடித்தார்?
Brendan Eich.

ஜாவாஸ்கிரிப்ட் என்றால் என்ன?
JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.[Lambda Expressions]

JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.

ஜாவாஸ்கிரிப்ட், ஜாவா ஒன்றா?
இல்லை.
ஜாவாவின் static type, strong type checking இங்கில்லை.  ஜாவாவைப் போன்ற syntax, naming convention, basic control flow statements இங்கும் உண்டு.  அதனால் தான் livescript என்னும் பெயரில் இருந்து ஜாவாஸ்கிரிப்ட் என்று பெயர் வைத்தார்கள்.

ஜாவாஸ்கிரிப்டில் numeric, Boolean, and string  உண்டு.

JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.

Java is a class-based programming language designed for fast execution and type safety.

JavaScript is standardized at Ecma International.

ECMA was formerly an acronym for the European Computer Manufacturers Association

ஜாவாஸ்கிரிப்டை எங்கே தொடங்குவது?
1) வெப் கன்சோல் (Web Console)
Ctrl+Shift+I
Tools --> Developer --> Web Console

2+2

console.log("Hi")
console.log(5+10)

2) Multiline Input:
Ctrl+Shift+Iக்குப் பிறகு Ctrl+B

(function(){
  "use strict";
  /* Start of your code */
  function greetMe(yourName) {
    alert(`Hello ${yourName}`);
  }

  greetMe('World');
  /* End of your code */
})();

மேல் உள்ளதை run பண்ண: Ctrl+Enter

அடிப்படைகள்:
JavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.

JavaScript has three kinds of variable declarations.

1. var:
var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.

var x = 1;

if (x === 1) {
  var x = 2;

  console.log('inside if ', x);
  // expected output: 2
}

console.log(x);
// expected output: 2

let:
The let declaration declares a block-scoped local variable, optionally initializing it to a value.

let x = 1;

if (x === 1) {
  let x = 2;

  console.log(x);
  // expected output: 2
}

console.log(x);
// expected output: 1

const:
The const declaration creates block-scoped constants.

const number = 42;

try {
  number = 99;
} catch (err) {
  console.log(err);
  // expected output: TypeError: invalid assignment to const `number'
  // Note - error messages will vary depending on browser
}

console.log(number);
// expected output: 42

----
Variables: [Identifiers]
A JavaScript identifier usually starts with a letter, underscore (_), or dollar sign ($).

In var and let declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value undefined.

let x;
console.log(x); // logs "undefined"

Datatypes:

8 Datatypes:

7 Datatypes are Primitive Datatypes:

Boolean     : true or false
null        : A special keyword denoting a null value.
undefined   : A top-level property whose value is not defined.
Number      : An integer or floating point number. 42 or 3.14159.
BigInt      :An integer with arbitrary precision 90071992547992n.
String      : A sequence of characters that represent a text value
Symbol      : A data type whose instances are unique & immutable.
Object


JavaScript is a dynamically typed language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution.

let answer = 42;
answer = 'Thanks you for your wishes!';

x = 'The answer is ' + 42 // "The answer is 42"
y = 42 + ' is the answer' // "42 is the answer"
z = '37' + 7 // "377"


'37' - 7 // 30
'37' * 7 // 259

strings into integer:

parseInt('101', 2) // 5
parseInt('101', 8) // 65

Literals:
Literals represent values in JavaScript. These are fixed values—not variables—that you literally provide in your script.


    Array literals
    Boolean literals
    Numeric literals
    Object literals
    RegExp literals
    String literals


Array literals:
const players = ['Messi', 'Ronaldo', 'Bhutia'];


const players = ['Messi', 'Ronaldo', 'Bhutia'];
console.log(players)





const players = ['Messi', '', 'Bhutia'];
console.log(players); //[ 'Messi', <1 empty item>, 'Bhutia' ]


Object Literals:

An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).

const sales = 'Toyota';

function carTypes(name) {
  return name === 'Honda' ? name : `Sorry, we don't sell ${name}.`;
}

const car = { myCar: 'City', getCar: carTypes('Honda'), special: sales };

console.log(car.myCar);   // City
console.log(car.getCar);  // Honda
console.log(car.special); // Toyota


const car = { manyCars: { a: 'Saab', b: 'Jeep' }, 7: 'Mazda' };

console.log(car.manyCars.b); // Jeep
console.log(car[7]); // Mazda


How to Execute using Notepad:
1. Save .js file anywhere. [eg. index.js]
2. Open Terminal and move to file location
3. Type as below:
    node index.js


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types


Document Object Model:

The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content.


Accessing DOM:
HTML கோப்பில்:

<body onload="console.log('Welcome to my home page!');">
  …
</body>

பொதுவாக ஜாவாஸ்கிரிப்டை HTMLஇல் சேர்ப்பது நல்லதில்லை.  எனவே,

<html lang="en">
  <head>
    <script>
      // run this function when the document is loaded
      window.onload = () => {
        // create a couple of elements in an otherwise empty HTML page
        const heading = document.createElement("h1"); // <h1> </h1>
        const headingText = document.createTextNode("Father Of Internet: Tim Berners Lee"); 
        heading.appendChild(headingText); //<h1> Father Of Internet: Tim Berners Lee</h1>
        document.body.appendChild(heading);
      };
    </script>
  </head>
  <body></body>
</html>

DOM Functions: createElement, createTextNode, appendChild

----------
Change Table Border Using Javascript:

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        #table_style {
            border:2px solid #CCC;
            width:100px;
            height:100px;
        }
    </style>
</head>
<body>
    <h2>Table Border Colorஐ ஜாவாஸ்கிரிப்ட் மூலம் மாற்றுவோம்</h2>
    <div id="table_style">வணக்கம்</div>
    <br>
    <button type="button" onclick="changeStyle()">Click Here</button>
    <script>
    function changeStyle(){
        var element = document.getElementById("table_style");
        element.style.borderColor = "red";
        //element.style.borderStyle = "dotted";
        //element.style.color = "#FF0000";

    }
    </script>
</body>
</html>

-------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        #table_style {
            border:2px solid #CCC;
            width:100px;
            height:100px;
        }
    </style>
</head>
<body>
    <h2>Input Valueஐ ஜாவாஸ்கிரிப்ட் மூலம் வாங்குவோம் </h2>
    <input id="username"> </input>
    <br>
    <button type="button" onclick="changeStyle()">Click Here</button>
    <script>
    function changeStyle(){
        var element = document.getElementById("username").value
        //console.log(element)
        alert(element)
    }
    </script>
</body>
</html>
------------------
HTML load ஆகும் போது ஜாவாஸ்கிரிப்ட் call ஆக வேண்டும்.
-------------------------------------------------
index2.html
-----------

<!DOCTYPE html>
<html>
	<head>
		<script type="text/javascript" src="index.js"> </script>
<style>
input{width:40%;height:50px;}
h2, p
{
color:blue;
}
button
{
width:40%;
height:50px;
background-color: black;
color: yellow;
}
</style>
</head>
<body>
<h2> Select By ID எடுத்துக்காட்டு</h2>
<input id="fromCity" placeHolder="Enter City Name"> <br>
<button> Submit </button>
<p id="toCity"> </p>
</body>
</html>

demo.js
-------
alert("Hi JS")
--------------

Get City Name above:
-------------------
<button onclick="getCityName()"> Submit </button>

இப்போது getCityName() என்னும் பெயரில் ஒரு function நமக்கு வேண்டும் அல்லவா>

<p> </p> க்குக் கீழ்:
<script>
	function getCityName()
	{
	cityName = document.getElementById("fromCity").value;

	}

</script>

இப்போது boxஇல் இருக்கும் மதிப்பை எடுக்க, அதற்கு அடுத்த வரியில்.

document.getElementById("toCity").innerHTML=cityName; சேர்க்க.

	function getCityName()
	{
	cityName = document.getElementById("fromCity").value;
	document.getElementById("toCity").innerHTML=cityName;
	}


இப்போது இந்த function ஐ அப்படியே வெட்டி எடுத்து index.jsஇல் வைத்துக் கொள்ளலாம். <script> </script> இரண்டையும் நீக்கி விடலாம்.

--------
DOM - Select By Tag Name:
------------------------

<!DOCTYPE html>
<html>
	<head>
		<script type="text/javascript" src="index.js"> </script>
<style>
input{width:40%;height:50px;}
h2, p
{
color:blue;
}
button
{
width:40%;
height:50px;
background-color: black;
color: yellow;
}
</style>
</head>
<body>
<h2> Select By Tag Name எடுத்துக்காட்டு</h2>
<input placeHolder="Enter City Name"> இல் இருந்து<br>
<input placeHolder="Enter City Name"> வரை<br>
<input placeHolder="Enter City Name"> இடைத்தங்கல்<br>
<button onclick="getCityName()"> Submit </button>
<p> </p>
<p> </p>
<p> </p>
	<script>
		function getCityName()
	{
	cityNamesInput = document.getElementsByTagName("input")
	cityNamesOutput = document.getElementsByTagName("p")
	cityNamesOutput[0].innerHTML =cityNamesInput[0].value
	cityNamesOutput[1].innerHTML =cityNamesInput[1].value
	cityNamesOutput[2].innerHTML =cityNamesInput[2].value
	}

	</script>
</body>
</html>

மேல் உள்ளதைக் கையாளத் தான் for loop.
for(int i=0; i<cityNamesInput.length;i++)
{
cityNamesOutput[i].innerHTML =cityNamesInput[i].value
}

-------------------
Select By Tag Name By ID:
-------------------------
tag வைத்து எடுக்கும் போது எல்லா inputஉம் வர வாய்ப்பு உள்ளதே!  அதை எப்படிக் கையாள்வது?
அதற்குத் தான் div id பயன்படுத்தப் போகிறோம்.

கீழ் உள்ளதைச் செயல்படுத்தி அதில் உள்ள சிக்கலைக் கவனியுங்கள்.

<!DOCTYPE html>
<html>
	<head>
	<script type="text/javascript" src="index.js"> </script>
<style>
input{width:40%;height:50px;}
h2, p
{
color:blue;
}
button
{
width:40%;
height:50px;
background-color: black;
color: yellow;
}
</style>
</head>
<body>
<h2> Select By Tag Name By ID எடுத்துக்காட்டு</h2>
<input placeHolder="Enter City Name"> இல் இருந்து<br>

<div id = "cities">
<input placeHolder="Enter City Name"> இல் இருந்து<br>
<input placeHolder="Enter City Name"> வரை<br>
<input placeHolder="Enter City Name"> இடைத்தங்கல்<br>

<button onclick="getCityName()"> Submit </button>
<p> </p>
<p> </p>
<p> </p>

</div>
	<script>
		function getCityName()
	{
	cityNamesInput = document.getElementsByTagName("input")
	cityNamesOutput = document.getElementsByTagName("p")
	cityNamesOutput[0].innerHTML =cityNamesInput[0].value
	cityNamesOutput[1].innerHTML =cityNamesInput[1].value
	cityNamesOutput[2].innerHTML =cityNamesInput[2].value
	}

	</script>
</body>
</html>

இதைத் தவிர்க்கத் தான், div idஐ scriptக்குள் பயன்படுத்தப் போகிறோம்.

	<script>
		function getCityName()
	{
       cityDivision = document.getElementById("cities")
	cityNamesInput = cityDivision.getElementsByTagName("input")
	cityNamesOutput = document.getElementsByTagName("p")
	cityNamesOutput[0].innerHTML =cityNamesInput[0].value
	cityNamesOutput[1].innerHTML =cityNamesInput[1].value
	cityNamesOutput[2].innerHTML =cityNamesInput[2].value
	}

	</script>
